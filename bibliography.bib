%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Andr√© Storhaug at 2025-02-25 12:02:26 +1100 


%% Saved with string encoding Unicode (UTF-8) 



@article{lin2024vulnerabilities,
	abstract = {Over the past decade, Open Source Software (OSS) has experienced rapid growth and widespread adoption, attributed to its openness and editability. However, this expansion has also brought significant security challenges, particularly introducing and propagating software vulnerabilities. Despite the use of machine learning and formal methods to tackle these issues, there remains a notable gap in comprehensive surveys that summarize and analyze both Vulnerability Detection (VD) and Security Patch Detection (SPD) in OSS. This article seeks to bridge this gap through an extensive survey that evaluates 127 technical studies published between 2014 and 2023, structured around the Vulnerability-Patch lifecycle. We begin by delineating the six critical events that constitute the Vulnerability-Patch lifecycle, leading to an in-depth exploration of the Vulnerability-Patch ecosystem. We then systematically review the databases commonly used in VD and SPD, and analyze their characteristics. Subsequently, we examine existing VD methods, focusing on traditional and deep learning based approaches. Additionally, we organize current security patch identification methods by kernel type and discuss techniques for detecting the presence of security patches. Based on our comprehensive review, we identify open research questions and propose future research directions that merit further exploration.},
	address = {New York, NY, USA},
	articleno = {23},
	author = {Lin, Ruyan and Fu, Yulong and Yi, Wei and Yang, Jincheng and Cao, Jin and Dong, Zhiqiang and Xie, Fei and Li, Hui},
	date-added = {2025-02-25 12:02:00 +1100},
	date-modified = {2025-02-25 12:02:00 +1100},
	doi = {10.1145/3694782},
	issn = {0360-0300},
	issue_date = {January 2025},
	journal = {ACM Comput. Surv.},
	keywords = {Open source software, vulnerability detection, security patch detection, software security, AI security},
	month = oct,
	number = {1},
	numpages = {37},
	publisher = {Association for Computing Machinery},
	title = {Vulnerabilities and Security Patches Detection in OSS: A Survey},
	url = {https://doi.org/10.1145/3694782},
	volume = {57},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3694782},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBNwYXBlcnMvbGluLzIwMjQucGRmTxEESGJvb2tIBAAAAAAEEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQDAAAFAAAAAQEAAFVzZXJzAAAADQAAAAEBAABhbmRyZXN0b3JoYXVnAAAABAAAAAEBAABDb2RlBgAAAAEBAABQYXBlcnMAAAwAAAABAQAAYmlibGlvZ3JhcGh5BgAAAAEBAABwYXBlcnMAAAMAAAABAQAAbGluAAgAAAABAQAAMjAyNC5wZGYgAAAAAQYAAAQAAAAUAAAALAAAADgAAABIAAAAXAAAAGwAAAB4AAAACAAAAAQDAADrXAAAAAAAAAgAAAAEAwAA9sIDAAAAAAAIAAAABAMAAJCoDwAAAAAACAAAAAQDAABirg8AAAAAAAgAAAAEAwAAvgpMGAAAAAAIAAAABAMAAMEYTBgAAAAACAAAAAQDAACBjmsYAAAAAAgAAAAEAwAAW45rGAAAAAAgAAAAAQYAALAAAADAAAAA0AAAAOAAAADwAAAAAAEAABABAAAgAQAACAAAAAAEAABBxranDk9TaRgAAAABAgAAAQAAAAAAAAAPAAAAAAAAAAAAAAAAAAAACAAAAAQDAAAGAAAAAAAAAAQAAAADAwAA9QEAAAgAAAABCQAAZmlsZTovLy8MAAAAAQEAAE1hY2ludG9zaCBIRAgAAAAEAwAAAJCClucAAAAIAAAAAAQAAEHGqT9HgAAAJAAAAAEBAAAxNEMwNTBGRC0xNzc3LTQyQjctQkZGRC1CQkZGRDA0NTRFQTAYAAAAAQIAAIEAAAABAAAA7xMAAAEAAAAAAAAAAAAAAAEAAAABAQAALwAAAAAAAAABBQAA8wAAAAECAAA5ZDUwNWVjMzZiYTFhOWVhNGIwNDliNzhjZTI4NDg0MWQyM2U5MzM3ZDNjZjkxYzJjZjdlM2E1M2UwMGYyZmM4OzAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwMDAwMDAwMjA7Y29tLmFwcGxlLmFwcC1zYW5kYm94LnJlYWQtd3JpdGU7MDE7MDEwMDAwMTA7MDAwMDAwMDAxODZiOGU1YjswMTsvdXNlcnMvYW5kcmVzdG9yaGF1Zy9jb2RlL3BhcGVycy9iaWJsaW9ncmFwaHkvcGFwZXJzL2xpbi8yMDI0LnBkZgAAzAAAAP7///8BAAAAAAAAABAAAAAEEAAAiAAAAAAAAAAFEAAAMAEAAAAAAAAQEAAAaAEAAAAAAABAEAAAWAEAAAAAAAACIAAANAIAAAAAAAAFIAAApAEAAAAAAAAQIAAAtAEAAAAAAAARIAAA6AEAAAAAAAASIAAAyAEAAAAAAAATIAAA2AEAAAAAAAAgIAAAFAIAAAAAAAAwIAAAQAIAAAAAAAABwAAAiAEAAAAAAAARwAAAFAAAAAAAAAASwAAAmAEAAAAAAACA8AAASAIAAAAAAAAACAANABoAIwA5AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAABIU=}}

@inproceedings{wang2019detecting,
	abstract = {Security patches in open source software (OSS) not only provide security fixes to identified vulnerabilities, but also make the vulnerable code public to the attackers. Therefore, armored attackers may misuse this information to launch N-day attacks on unpatched OSS versions. The best practice for preventing this type of N-day attacks is to keep upgrading the software to the latest version in no time. However, due to the concerns on reputation and easy software development management, software vendors may choose to secretly patch their vulnerabilities in a new version without reporting them to CVE or even providing any explicit description in their change logs. When those secretly patched vulnerabilities are being identified by armored attackers, they can be turned into powerful "0-day" attacks, which can be exploited to compromise not only unpatched version of the same software, but also similar types of OSS (e.g., SSL libraries) that may contain the same vulnerability due to code clone or similar design/implementation logic. Therefore, it is critical to identify secret security patches and downgrade the risk of those "0-day" attacks to at least "n-day" attacks. In this paper, we develop a defense system and implement a toolset to automatically identify secret security patches in open source software. To distinguish security patches from other patches, we first build a security patch database that contains more than 4700 security patches mapping to the records in CVE list. Next, we identify a set of features to help distinguish security patches from non-security ones using machine learning approaches. Finally, we use code clone identification mechanisms to discover similar patches or vulnerabilities in similar types of OSS. The experimental results show our approach can achieve good detection performance. A case study on OpenSSL, LibreSSL, and BoringSSL discovers 12 secret security patches.},
	author = {Wang, Xinda and Sun, Kun and Batcheller, Archer and Jajodia, Sushil},
	booktitle = {2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
	date-added = {2025-02-25 11:59:52 +1100},
	date-modified = {2025-02-25 11:59:52 +1100},
	doi = {10.1109/DSN.2019.00056},
	issn = {1530-0889},
	keywords = {Security;Databases;Machine learning;Open source software;Training;Computer bugs;security patch;vulnerability detection;open source software},
	month = {June},
	pages = {485-492},
	title = {Detecting "0-Day" Vulnerability: An Empirical Study of Secret Security Patch in OSS},
	year = {2019},
	bdsk-url-1 = {https://doi.org/10.1109/DSN.2019.00056},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvd2FuZy8yMDE5LnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHdhbmcIAAAAAQEAADIwMTkucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAArYRrGAAAAAAIAAAABAMAAB6LaxgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca2prexUZwYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAY2M3MGZlNzU0YTQyZDQwNzAyMjIyZjBiMzNiMzU2NjVmYTE0N2VmMmU1YTdjOWYwMTM2ZDU1MzUyNWRhMTZlOTswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2YjhiMWU7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy93YW5nLzIwMTkucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG}}

@inproceedings{wang2021patchrnn:,
	abstract = {With the increasing usage of open-source software (OSS) components, vulnerabilities embedded within them are propagated to a huge number of underlying applications. In practice, the timely application of security patches in downstream software is challenging. The main reason is that such patches do not explicitly indicate their security impacts in the documentation, which would be difficult to recognize for software maintainers and users. However, attackers can still identify these ``secret'' security patches by analyzing the source code and generate corresponding exploits to compromise not only unpatched versions of the current software, but also other similar software packages that may contain the same vulnerability due to code cloning or similar design/implementation logic. Therefore, it is critical to identify these secret security patches to enable timely fixes. To this end, we propose a deep learning-based defense system called PatchRNN to automatically identify secret security patches in OSS. Besides considering descriptive keywords in the commit message (i.e., at the text level), we leverage both syntactic and semantic features at the source-code level. To evaluate the performance of our system, we apply it on a large-scale real-world patch dataset and conduct a case study on a popular open-source web server software - NGINX. Experimental results show that the PatchRNN can successfully detect secret security patches with a low false positive rate.},
	author = {Wang, Xinda and Wang, Shu and Feng, Pengbin and Sun, Kun and Jajodia, Sushil and Benchaaboun, Sanae and Geck, Frank},
	booktitle = {MILCOM 2021 - 2021 IEEE Military Communications Conference (MILCOM)},
	date-added = {2025-02-25 11:56:39 +1100},
	date-modified = {2025-02-25 11:56:39 +1100},
	doi = {10.1109/MILCOM52596.2021.9652940},
	location = {San Diego, CA, USA},
	numpages = {6},
	pages = {595--600},
	publisher = {IEEE Press},
	title = {PatchRNN: A Deep Learning-Based System for Security Patch Identification},
	url = {https://doi.org/10.1109/MILCOM52596.2021.9652940},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1109/MILCOM52596.2021.9652940},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvd2FuZy8yMDIxLnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHdhbmcIAAAAAQEAADIwMjEucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAArYRrGAAAAAAIAAAABAMAAHmIaxgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca2pnAFlH0YAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAZjY4Y2Q5MDIzOGJmYTZkNDAwMDkzMjE5Zjg4YTk3YzkzYzllYzMwOTc2OWM5YjczYmZkNDA3YzliZDZlMjJlNjswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2Yjg4Nzk7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy93YW5nLzIwMjEucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG}}

@inproceedings{wang2023graphspd:,
	author = {Wang, Shu and Wang, Xinda and Sun, Kun and Jajodia, Sushil and Wang, Haining and Li, Qi},
	booktitle = {2023 IEEE Symposium on Security and Privacy (SP)},
	date-added = {2025-02-25 11:53:26 +1100},
	date-modified = {2025-02-25 11:53:26 +1100},
	doi = {10.1109/SP46215.2023.10179479},
	keywords = {Software maintenance;Privacy;Codes;Convolution;Source coding;Semantics;Merging},
	pages = {2409-2426},
	title = {GraphSPD: Graph-Based Security Patch Detection with Enriched Code Semantics},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/SP46215.2023.10179479},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvd2FuZy8yMDIzLnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHdhbmcIAAAAAQEAADIwMjMucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAArYRrGAAAAAAIAAAABAMAADuDaxgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca2pgryZGcYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAANDViNmIwYTY3ZDNhNDQ1MTdiYzgxODJhNDk5ZjBlMzNmZjQ5ZWEyNmUyMjI3OTliMzIzZjI5ZGM4MjYzNTRhZTswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2YjgzM2I7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy93YW5nLzIwMjMucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG}}

@misc{chen2024compvpd:,
	archiveprefix = {arXiv},
	author = {Tianyu Chen and Lin Li and Taotao Qian and Jingyi Liu and Wei Yang and Ding Li and Guangtai Liang and Qianxiang Wang and Tao Xie},
	date-added = {2025-02-25 11:48:29 +1100},
	date-modified = {2025-02-25 11:48:29 +1100},
	eprint = {2310.02530},
	primaryclass = {cs.CR},
	title = {CompVPD: Iteratively Identifying Vulnerability Patches Based on Human Validation Results with a Precise Context},
	url = {https://arxiv.org/abs/2310.02530},
	year = {2024},
	bdsk-url-1 = {https://arxiv.org/abs/2310.02530},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvY2hlbi8yMDI0LnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAGNoZW4IAAAAAQEAADIwMjQucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA8HhrGAAAAAAIAAAABAMAALt4axgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca2pXFuyxAYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAMzQ5Y2I5YjZhZjlhMTg3NjUyZmVjOTYyZjMzZTRhMWE4ZTNlZjZjMzlhNWVkYmNmYWQ3ZDgwNThlMDAyYWE5YjswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2Yjc4YmI7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy9jaGVuLzIwMjQucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG}}

@article{wu5555-enhancing,
	abstract = { With the rapid increasing number of open source software (OSS), the majority of the software vulnerabilities in the open source components are fixed silently, which leads to the deployed software that integrated them being unable to get a timely update. Hence, it is critical to design a security patch identification system to ensure the security of the utilized software. However, most of the existing works for security patch identification just consider the changed code and the commit message of a commit as a flat sequence of tokens with simple neural networks to learn its semantics, while the structure information is ignored. To address these limitations, in this paper, we propose our well-designed approach E-SPI, which extracts the structure information hidden in a commit for effective identification. Specifically, it consists of the code change encoder to extract the syntactic of the changed code with the BiLSTM to learn the code representation and the message encoder to construct the dependency graph for the commit message with the graph neural network (GNN) to learn the message representation. We further enhance the code change encoder by embedding contextual information related to the changed code. To demonstrate the effectiveness of our approach, we conduct the extensive experiments against six state-of-the-art approaches on the existing dataset and from the real deployment environment. The experimental results confirm that our approach can significantly outperform current state-of-the-art baselines. },
	address = {Los Alamitos, CA, USA},
	author = {Wu, Bozhi and Liu, Shangqing and Feng, Ruitao and Xie, Xiaofei and Siow, Jingkai and Lin, Shang-Wei},
	date-added = {2025-02-25 11:44:30 +1100},
	date-modified = {2025-02-25 11:44:30 +1100},
	doi = {10.1109/TDSC.2022.3192631},
	issn = {1941-0018},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	keywords = {Codes;Security;Syntactics;Semantics;Graph neural networks;Data mining;Task analysis},
	month = jul,
	number = {01},
	pages = {1-15},
	publisher = {IEEE Computer Society},
	title = {{ Enhancing Security Patch Identification by Capturing Structures in Commits }},
	url = {https://doi.ieeecomputersociety.org/10.1109/TDSC.2022.3192631},
	year = {5555},
	bdsk-url-1 = {https://doi.ieeecomputersociety.org/10.1109/TDSC.2022.3192631},
	bdsk-url-2 = {https://doi.org/10.1109/TDSC.2022.3192631},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBJwYXBlcnMvd3UvNTU1NS5wZGZPEQRIYm9va0gEAAAAAAQQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAMAAAUAAAABAQAAVXNlcnMAAAANAAAAAQEAAGFuZHJlc3RvcmhhdWcAAAAEAAAAAQEAAENvZGUGAAAAAQEAAFBhcGVycwAADAAAAAEBAABiaWJsaW9ncmFwaHkGAAAAAQEAAHBhcGVycwAAAgAAAAEBAAB3dQAACAAAAAEBAAA1NTU1LnBkZiAAAAABBgAABAAAABQAAAAsAAAAOAAAAEgAAABcAAAAbAAAAHgAAAAIAAAABAMAAOtcAAAAAAAACAAAAAQDAAD2wgMAAAAAAAgAAAAEAwAAkKgPAAAAAAAIAAAABAMAAGKuDwAAAAAACAAAAAQDAAC+CkwYAAAAAAgAAAAEAwAAwRhMGAAAAAAIAAAABAMAAPBzaxgAAAAACAAAAAQDAABqc2sYAAAAACAAAAABBgAAsAAAAMAAAADQAAAA4AAAAPAAAAAAAQAAEAEAACABAAAIAAAAAAQAAEHGtqTtHqfOGAAAAAECAAABAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAIAAAABAMAAAYAAAAAAAAABAAAAAMDAAD1AQAACAAAAAEJAABmaWxlOi8vLwwAAAABAQAATWFjaW50b3NoIEhECAAAAAQDAAAAkIKW5wAAAAgAAAAABAAAQcapP0eAAAAkAAAAAQEAADE0QzA1MEZELTE3NzctNDJCNy1CRkZELUJCRkZEMDQ1NEVBMBgAAAABAgAAgQAAAAEAAADvEwAAAQAAAAAAAAAAAAAAAQAAAAEBAAAvAAAAAAAAAAEFAADyAAAAAQIAAGNlNGViNTMzMmU0OTc1NTJjYTkyZThmODcwMmIwZGRjMzQ0NzRmMjgwMjYxMWYxZTI0OTMzOWE5ZWM2M2UyYjY7MDA7MDAwMDAwMDA7MDAwMDAwMDA7MDAwMDAwMDA7MDAwMDAwMDAwMDAwMDAyMDtjb20uYXBwbGUuYXBwLXNhbmRib3gucmVhZC13cml0ZTswMTswMTAwMDAxMDswMDAwMDAwMDE4NmI3MzZhOzAxOy91c2Vycy9hbmRyZXN0b3JoYXVnL2NvZGUvcGFwZXJzL2JpYmxpb2dyYXBoeS9wYXBlcnMvd3UvNTU1NS5wZGYAAADMAAAA/v///wEAAAAAAAAAEAAAAAQQAACIAAAAAAAAAAUQAAAwAQAAAAAAABAQAABoAQAAAAAAAEAQAABYAQAAAAAAAAIgAAA0AgAAAAAAAAUgAACkAQAAAAAAABAgAAC0AQAAAAAAABEgAADoAQAAAAAAABIgAADIAQAAAAAAABMgAADYAQAAAAAAACAgAAAUAgAAAAAAADAgAABAAgAAAAAAAAHAAACIAQAAAAAAABHAAAAUAAAAAAAAABLAAACYAQAAAAAAAIDwAABIAgAAAAAAAAAIAA0AGgAjADgAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAEhA==}}

@article{zhou2021spi:,
	abstract = {Security patches in open source software, providing security fixes to identified vulnerabilities, are crucial in protecting against cyber attacks. Security advisories and announcements are often publicly released to inform the users about potential security vulnerability. Despite the National Vulnerability Database (NVD) publishes identified vulnerabilities, a vast majority of vulnerabilities and their corresponding security patches remain beyond public exposure, e.g., in the open source libraries that are heavily relied on by developers. As many of these patches exist in open sourced projects, the problem of curating and gathering security patches can be difficult due to their hidden nature. An extensive and complete security patches dataset could help end-users such as security companies, e.g., building a security knowledge base, or researcher, e.g., aiding in vulnerability research.To efficiently curate security patches including undisclosed patches at large scale and low cost, we propose a deep neural-network-based approach built upon commits of open source repositories. First, we design and build security patch datasets that include 38,291 security-related commits and 1,045 Common Vulnerabilities and Exposures (CVE) patches from four large-scale C programming language libraries. We manually verify each commit, among the 38,291 security-related commits, to determine if they are security related.We devise and implement a deep learning-based security patch identification system that consists of two composite neural networks: one commit-message neural network that utilizes pretrained word representations learned from our commits dataset and one code-revision neural network that takes code before revision and after revision and learns the distinction on the statement level. Our system leverages the power of the two networks for Security Patch Identification. Evaluation results show that our system significantly outperforms SVM and K-fold stacking algorithms. The result on the combined dataset achieves as high as 87.93\% F1-score and precision of 86.24\%.We deployed our pipeline and learned model in an industrial production environment to evaluate the generalization ability of our approach. The industrial dataset consists of 298,917 commits from 410 new libraries that range from a wide functionalities. Our experiment results and observation on the industrial dataset proved that our approach can identify security patches effectively among open sourced projects.},
	address = {New York, NY, USA},
	articleno = {13},
	author = {Zhou, Yaqin and Siow, Jing Kai and Wang, Chenyu and Liu, Shangqing and Liu, Yang},
	date-added = {2025-02-25 11:39:35 +1100},
	date-modified = {2025-02-25 11:39:35 +1100},
	doi = {10.1145/3468854},
	issn = {1049-331X},
	issue_date = {January 2022},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	keywords = {software security, deep learning, Machine learning},
	month = sep,
	number = {1},
	numpages = {27},
	publisher = {Association for Computing Machinery},
	title = {SPI: Automated Identification of Security Patches via Commits},
	url = {https://doi.org/10.1145/3468854},
	volume = {31},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1145/3468854},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBVwYXBlcnMvemhvdS8yMDIxYS5wZGZPEQRQYm9va1AEAAAAAAQQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAMAAAUAAAABAQAAVXNlcnMAAAANAAAAAQEAAGFuZHJlc3RvcmhhdWcAAAAEAAAAAQEAAENvZGUGAAAAAQEAAFBhcGVycwAADAAAAAEBAABiaWJsaW9ncmFwaHkGAAAAAQEAAHBhcGVycwAABAAAAAEBAAB6aG91CQAAAAEBAAAyMDIxYS5wZGYAAAAgAAAAAQYAAAQAAAAUAAAALAAAADgAAABIAAAAXAAAAGwAAAB4AAAACAAAAAQDAADrXAAAAAAAAAgAAAAEAwAA9sIDAAAAAAAIAAAABAMAAJCoDwAAAAAACAAAAAQDAABirg8AAAAAAAgAAAAEAwAAvgpMGAAAAAAIAAAABAMAAMEYTBgAAAAACAAAAAQDAADnsVwYAAAAAAgAAAAEAwAArG1rGAAAAAAgAAAAAQYAALQAAADEAAAA1AAAAOQAAAD0AAAABAEAABQBAAAkAQAACAAAAAAEAABBxrakW7SjpRgAAAABAgAAAQAAAAAAAAAPAAAAAAAAAAAAAAAAAAAACAAAAAQDAAAGAAAAAAAAAAQAAAADAwAA9QEAAAgAAAABCQAAZmlsZTovLy8MAAAAAQEAAE1hY2ludG9zaCBIRAgAAAAEAwAAAJCClucAAAAIAAAAAAQAAEHGqT9HgAAAJAAAAAEBAAAxNEMwNTBGRC0xNzc3LTQyQjctQkZGRC1CQkZGRDA0NTRFQTAYAAAAAQIAAIEAAAABAAAA7xMAAAEAAAAAAAAAAAAAAAEAAAABAQAALwAAAAAAAAABBQAA9QAAAAECAAA3ZWM1OTgzZWRkNzBhNDcwZTcxMjVmNzUzNmUxYTZkZTgzZjliMTEyMTI2Y2M4OGI4MzA5Yzg2NTNkNjE0YjA3OzAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwMDAwMDAwMjA7Y29tLmFwcGxlLmFwcC1zYW5kYm94LnJlYWQtd3JpdGU7MDE7MDEwMDAwMTA7MDAwMDAwMDAxODZiNmRhYzswMTsvdXNlcnMvYW5kcmVzdG9yaGF1Zy9jb2RlL3BhcGVycy9iaWJsaW9ncmFwaHkvcGFwZXJzL3pob3UvMjAyMWEucGRmAAAAAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIwAAAAAAAAABRAAADQBAAAAAAAAEBAAAGwBAAAAAAAAQBAAAFwBAAAAAAAAAiAAADgCAAAAAAAABSAAAKgBAAAAAAAAECAAALgBAAAAAAAAESAAAOwBAAAAAAAAEiAAAMwBAAAAAAAAEyAAANwBAAAAAAAAICAAABgCAAAAAAAAMCAAAEQCAAAAAAAAAcAAAIwBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJwBAAAAAAAAgPAAAEwCAAAAAAAAAAgADQAaACMAOwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASP}}

@inproceedings{machiry2020spider:,
	author = {Machiry, Aravind and Redini, Nilo and Camellini, Eric and Kruegel, Christopher and Vigna, Giovanni},
	booktitle = {2020 IEEE Symposium on Security and Privacy (SP)},
	date-added = {2025-02-25 11:37:28 +1100},
	date-modified = {2025-02-25 11:37:28 +1100},
	doi = {10.1109/SP40000.2020.00038},
	keywords = {Security;Kernel;Testing;Databases;Androids;Humanoid robots},
	pages = {1562-1579},
	title = {SPIDER: Enabling Fast Patch Propagation In Related Software Repositories},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1109/SP40000.2020.00038},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBdwYXBlcnMvbWFjaGlyeS8yMDIwLnBkZk8RBFBib29rUAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAHAAAAAQEAAG1hY2hpcnkACAAAAAEBAAAyMDIwLnBkZiAAAAABBgAABAAAABQAAAAsAAAAOAAAAEgAAABcAAAAbAAAAHwAAAAIAAAABAMAAOtcAAAAAAAACAAAAAQDAAD2wgMAAAAAAAgAAAAEAwAAkKgPAAAAAAAIAAAABAMAAGKuDwAAAAAACAAAAAQDAAC+CkwYAAAAAAgAAAAEAwAAwRhMGAAAAAAIAAAABAMAALlqaxgAAAAACAAAAAQDAABdamsYAAAAACAAAAABBgAAtAAAAMQAAADUAAAA5AAAAPQAAAAEAQAAFAEAACQBAAAIAAAAAAQAAEHGtqQcziMxGAAAAAECAAABAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAIAAAABAMAAAYAAAAAAAAABAAAAAMDAAD1AQAACAAAAAEJAABmaWxlOi8vLwwAAAABAQAATWFjaW50b3NoIEhECAAAAAQDAAAAkIKW5wAAAAgAAAAABAAAQcapP0eAAAAkAAAAAQEAADE0QzA1MEZELTE3NzctNDJCNy1CRkZELUJCRkZEMDQ1NEVBMBgAAAABAgAAgQAAAAEAAADvEwAAAQAAAAAAAAAAAAAAAQAAAAEBAAAvAAAAAAAAAAEFAAD3AAAAAQIAADJhZjQyMTFmMjcxYTU4MTRmYzJkOWMzOGY3NjNlZGE3OGNiMGJjMWY4YmZhNDVkN2ZiNjJhMTdlNTVhMDg5NTc7MDA7MDAwMDAwMDA7MDAwMDAwMDA7MDAwMDAwMDA7MDAwMDAwMDAwMDAwMDAyMDtjb20uYXBwbGUuYXBwLXNhbmRib3gucmVhZC13cml0ZTswMTswMTAwMDAxMDswMDAwMDAwMDE4NmI2YTVkOzAxOy91c2Vycy9hbmRyZXN0b3JoYXVnL2NvZGUvcGFwZXJzL2JpYmxpb2dyYXBoeS9wYXBlcnMvbWFjaGlyeS8yMDIwLnBkZgAAzAAAAP7///8BAAAAAAAAABAAAAAEEAAAjAAAAAAAAAAFEAAANAEAAAAAAAAQEAAAbAEAAAAAAABAEAAAXAEAAAAAAAACIAAAOAIAAAAAAAAFIAAAqAEAAAAAAAAQIAAAuAEAAAAAAAARIAAA7AEAAAAAAAASIAAAzAEAAAAAAAATIAAA3AEAAAAAAAAgIAAAGAIAAAAAAAAwIAAARAIAAAAAAAABwAAAjAEAAAAAAAARwAAAFAAAAAAAAAASwAAAnAEAAAAAAACA8AAATAIAAAAAAAAACAANABoAIwA9AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAABJE=}}

@inproceedings{tan2021locating,
	abstract = {Security patches play an important role in defending against the security threats brought by the increasing OSS vulnerabilities. However, the collection of security patches still remains a challenging problem. Existing works mainly adopt a matching-based design that uses auxiliary information in CVE/NVD to reduce the search scope of patch commits. However, our preliminary study shows that these approaches can only cover a small part of disclosed OSS vulnerabilities (about 12\%-53\%) even with manual assistance.To facilitate the collection of OSS security patches, this paper proposes a ranking-based approach, named PatchScout, which ranks the code commits in the OSS code repository based on their correlations to a given vulnerability. By exploiting the broad correlations between a vulnerability and code commits, patch commits are expected to be put to front positions in the ranked results. Compared with existing works, our approach could help to locate more security patches and meet a balance between the patch coverage and the manual efforts involved. We evaluate PatchScout with 685 OSS CVEs and the results show that it helps to locate 92.70\% patches with acceptable manual workload. To further demonstrate the utility of PatchScout, we perform a study on 5 popular OSS projects and 225 CVEs to understand the patch deployment practice across branches, and we obtain many new findings.},
	address = {New York, NY, USA},
	author = {Tan, Xin and Zhang, Yuan and Mi, Chenyuan and Cao, Jiajun and Sun, Kun and Lin, Yifan and Yang, Min},
	booktitle = {Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
	date-added = {2025-02-25 11:36:38 +1100},
	date-modified = {2025-02-25 11:36:38 +1100},
	doi = {10.1145/3460120.3484593},
	isbn = {9781450384544},
	keywords = {vulnerability-commit correlation, security patches, patch ranking},
	location = {Virtual Event, Republic of Korea},
	numpages = {18},
	pages = {3282--3299},
	publisher = {Association for Computing Machinery},
	series = {CCS '21},
	title = {Locating the Security Patches for Disclosed OSS Vulnerabilities with Vulnerability-Commit Correlation Ranking},
	url = {https://doi.org/10.1145/3460120.3484593},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1145/3460120.3484593},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBNwYXBlcnMvdGFuLzIwMjEucGRmTxEESGJvb2tIBAAAAAAEEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQDAAAFAAAAAQEAAFVzZXJzAAAADQAAAAEBAABhbmRyZXN0b3JoYXVnAAAABAAAAAEBAABDb2RlBgAAAAEBAABQYXBlcnMAAAwAAAABAQAAYmlibGlvZ3JhcGh5BgAAAAEBAABwYXBlcnMAAAMAAAABAQAAdGFuAAgAAAABAQAAMjAyMS5wZGYgAAAAAQYAAAQAAAAUAAAALAAAADgAAABIAAAAXAAAAGwAAAB4AAAACAAAAAQDAADrXAAAAAAAAAgAAAAEAwAA9sIDAAAAAAAIAAAABAMAAJCoDwAAAAAACAAAAAQDAABirg8AAAAAAAgAAAAEAwAAvgpMGAAAAAAIAAAABAMAAMEYTBgAAAAACAAAAAQDAAD5aWsYAAAAAAgAAAAEAwAAqWlrGAAAAAAgAAAAAQYAALAAAADAAAAA0AAAAOAAAADwAAAAAAEAABABAAAgAQAACAAAAAAEAABBxrakEOimIhgAAAABAgAAAQAAAAAAAAAPAAAAAAAAAAAAAAAAAAAACAAAAAQDAAAGAAAAAAAAAAQAAAADAwAA9QEAAAgAAAABCQAAZmlsZTovLy8MAAAAAQEAAE1hY2ludG9zaCBIRAgAAAAEAwAAAJCClucAAAAIAAAAAAQAAEHGqT9HgAAAJAAAAAEBAAAxNEMwNTBGRC0xNzc3LTQyQjctQkZGRC1CQkZGRDA0NTRFQTAYAAAAAQIAAIEAAAABAAAA7xMAAAEAAAAAAAAAAAAAAAEAAAABAQAALwAAAAAAAAABBQAA8wAAAAECAAA2NjRlOWI3MjFkYWQzYjM1MDI0MGMwMzMwMWU0ZDQxNWMyNTMzZTRkNjcyOTczZmZlOTNiOTk4OWI1MDgxYWZlOzAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwMDAwMDAwMjA7Y29tLmFwcGxlLmFwcC1zYW5kYm94LnJlYWQtd3JpdGU7MDE7MDEwMDAwMTA7MDAwMDAwMDAxODZiNjlhOTswMTsvdXNlcnMvYW5kcmVzdG9yaGF1Zy9jb2RlL3BhcGVycy9iaWJsaW9ncmFwaHkvcGFwZXJzL3Rhbi8yMDIxLnBkZgAAzAAAAP7///8BAAAAAAAAABAAAAAEEAAAiAAAAAAAAAAFEAAAMAEAAAAAAAAQEAAAaAEAAAAAAABAEAAAWAEAAAAAAAACIAAANAIAAAAAAAAFIAAApAEAAAAAAAAQIAAAtAEAAAAAAAARIAAA6AEAAAAAAAASIAAAyAEAAAAAAAATIAAA2AEAAAAAAAAgIAAAFAIAAAAAAAAwIAAAQAIAAAAAAAABwAAAiAEAAAAAAAARwAAAFAAAAAAAAAASwAAAmAEAAAAAAACA8AAASAIAAAAAAAAACAANABoAIwA5AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAABIU=}}

@inproceedings{nguyen2023vffinder:,
	author = {Nguyen, Son and Vu, Thanh Trong and Vo, Hieu Dinh},
	booktitle = {2023 15th International Conference on Knowledge and Systems Engineering (KSE)},
	date-added = {2025-02-23 20:47:59 +1100},
	date-modified = {2025-02-23 20:47:59 +1100},
	doi = {10.1109/KSE59128.2023.10299438},
	keywords = {Knowledge engineering;Syntactics;Feature extraction;Reliability engineering;Software;Libraries;Graph neural networks;silent vulnerability fixes;vulnerability fix identification' code change representation;graph-based model},
	pages = {1-6},
	title = {VFFINDER: A Graph-Based Approach for Automated Silent Vulnerability-Fix Identification},
	year = {2023},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBdwYXBlcnMvbmd1eWVuLzIwMjNhLnBkZk8RBFRib29rVAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAGAAAAAQEAAG5ndXllbgAACQAAAAEBAAAyMDIzYS5wZGYAAAAgAAAAAQYAAAQAAAAUAAAALAAAADgAAABIAAAAXAAAAGwAAAB8AAAACAAAAAQDAADrXAAAAAAAAAgAAAAEAwAA9sIDAAAAAAAIAAAABAMAAJCoDwAAAAAACAAAAAQDAABirg8AAAAAAAgAAAAEAwAAvgpMGAAAAAAIAAAABAMAAMEYTBgAAAAACAAAAAQDAADpsVwYAAAAAAgAAAAEAwAAyQ5hGAAAAAAgAAAAAQYAALgAAADIAAAA2AAAAOgAAAD4AAAACAEAABgBAAAoAQAACAAAAAAEAABBxrWSw+gNLBgAAAABAgAAAQAAAAAAAAAPAAAAAAAAAAAAAAAAAAAACAAAAAQDAAAGAAAAAAAAAAQAAAADAwAA9QEAAAgAAAABCQAAZmlsZTovLy8MAAAAAQEAAE1hY2ludG9zaCBIRAgAAAAEAwAAAJCClucAAAAIAAAAAAQAAEHGqT9HgAAAJAAAAAEBAAAxNEMwNTBGRC0xNzc3LTQyQjctQkZGRC1CQkZGRDA0NTRFQTAYAAAAAQIAAIEAAAABAAAA7xMAAAEAAAAAAAAAAAAAAAEAAAABAQAALwAAAAAAAAABBQAA9wAAAAECAAAyZGQzNjA1ZDQzYTI4YzYwYThmNDkzZWI3NzJlZTg3ODhiZTBhMDU5NWJiN2Y5NmYyY2U5NWYxODJjM2JjYTIxOzAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwMDAwMDAwMjA7Y29tLmFwcGxlLmFwcC1zYW5kYm94LnJlYWQtd3JpdGU7MDE7MDEwMDAwMTA7MDAwMDAwMDAxODYxMGVjOTswMTsvdXNlcnMvYW5kcmVzdG9yaGF1Zy9jb2RlL3BhcGVycy9iaWJsaW9ncmFwaHkvcGFwZXJzL25ndXllbi8yMDIzYS5wZGYAAMwAAAD+////AQAAAAAAAAAQAAAABBAAAJAAAAAAAAAABRAAADgBAAAAAAAAEBAAAHABAAAAAAAAQBAAAGABAAAAAAAAAiAAADwCAAAAAAAABSAAAKwBAAAAAAAAECAAALwBAAAAAAAAESAAAPABAAAAAAAAEiAAANABAAAAAAAAEyAAAOABAAAAAAAAICAAABwCAAAAAAAAMCAAAEgCAAAAAAAAAcAAAJABAAAAAAAAEcAAABQAAAAAAAAAEsAAAKABAAAAAAAAgPAAAFACAAAAAAAAAAgADQAaACMAPQAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASV},
	bdsk-url-1 = {https://doi.org/10.1109/KSE59128.2023.10299438}}

@inproceedings{zhou2017automated,
	abstract = {The number of vulnerabilities in open source libraries is increasing rapidly. However, the majority of them do not go through public disclosure. These unidentified vulnerabilities put developers' products at risk of being hacked since they are increasingly relying on open source libraries to assemble and build software quickly. To find unidentified vulnerabilities in open source libraries and secure modern software development, we describe an efficient automatic vulnerability identification system geared towards tracking large-scale projects in real time using natural language processing and machine learning techniques. Built upon the latent information underlying commit messages and bug reports in open source projects using GitHub, JIRA, and Bugzilla, our K-fold stacking classifier achieves promising results on vulnerability identification. Compared to the state of the art SVM-based classifier in prior work on vulnerability identification in commit messages, we improve precision by 54.55\% while maintaining the same recall rate. For bug reports, we achieve a much higher precision of 0.70 and recall rate of 0.71 compared to existing work. Moreover, observations from running the trained model at SourceClear in production for over 3 months has shown 0.83 precision, 0.74 recall rate, and detected 349 hidden vulnerabilities, proving the effectiveness and generality of the proposed approach.},
	address = {New York, NY, USA},
	author = {Zhou, Yaqin and Sharma, Asankhaya},
	booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
	date-added = {2025-02-23 20:02:04 +1100},
	date-modified = {2025-02-23 20:02:04 +1100},
	doi = {10.1145/3106237.3117771},
	isbn = {9781450351058},
	keywords = {vulnerability identification, machine learning, commit, bug report},
	location = {Paderborn, Germany},
	numpages = {6},
	pages = {914--919},
	publisher = {Association for Computing Machinery},
	series = {ESEC/FSE 2017},
	title = {Automated identification of security issues from commit messages and bug reports},
	url = {https://doi.org/10.1145/3106237.3117771},
	year = {2017},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvemhvdS8yMDE3LnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHpob3UIAAAAAQEAADIwMTcucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA57FcGAAAAAAIAAAABAMAAFDxYBgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca1jcfqhGoYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAMjVmMDY0MDkyNGFkMzM5NDRiZmQwN2NlOWM1ZGU3MDdlOGRhZDlhMDQ2NjQ3YzIyM2NmMTQwZDM0YWJhNjU1MzswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2MGYxNTA7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy96aG91LzIwMTcucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG},
	bdsk-url-1 = {https://doi.org/10.1145/3106237.3117771}}

@inproceedings{perl2015vccfinder:,
	abstract = {Despite the security community's best effort, the number of serious vulnerabilities discovered in software is increasing rapidly. In theory, security audits should find and remove the vulnerabilities before the code ever gets deployed. However, due to the enormous amount of code being produced, as well as a the lack of manpower and expertise, not all code is sufficiently audited. Thus, many vulnerabilities slip into production systems. A best-practice approach is to use a code metric analysis tool, such as Flawfinder, to flag potentially dangerous code so that it can receive special attention. However, because these tools have a very high false-positive rate, the manual effort needed to find vulnerabilities remains overwhelming. In this paper, we present a new method of finding potentially dangerous code in code repositories with a significantly lower false-positive rate than comparable systems. We combine code-metric analysis with metadata gathered from code repositories to help code review teams prioritize their work. The paper makes three contributions. First, we conducted the first large-scale mapping of CVEs to GitHub commits in order to create a vulnerable commit database. Second, based on this database, we trained a SVM classifier to flag suspicious commits. Compared to Flawfinder, our approach reduces the amount of false alarms by over 99 \% at the same level of recall. Finally, we present a thorough quantitative and qualitative analysis of our approach and discuss lessons learned from the results. We will share the database as a benchmark for future research and will also provide our analysis tool as a web service.},
	address = {New York, NY, USA},
	author = {Perl, Henning and Dechand, Sergej and Smith, Matthew and Arp, Daniel and Yamaguchi, Fabian and Rieck, Konrad and Fahl, Sascha and Acar, Yasemin},
	booktitle = {Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
	date-added = {2025-02-23 19:43:34 +1100},
	date-modified = {2025-02-23 19:43:34 +1100},
	doi = {10.1145/2810103.2813604},
	isbn = {9781450338325},
	keywords = {machine learning, static analysis, vulnerabilities},
	location = {Denver, Colorado, USA},
	numpages = {12},
	pages = {426--437},
	publisher = {Association for Computing Machinery},
	series = {CCS '15},
	title = {VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits},
	url = {https://doi.org/10.1145/2810103.2813604},
	year = {2015},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvcGVybC8yMDE1LnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHBlcmwIAAAAAQEAADIwMTUucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA1eZgGAAAAAAIAAAABAMAAJnmYBgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca1i56CY64YAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAZTUyYjIzZTNkZmU1ZjcxNWExMTg4MzM5MTlmMzU0N2M4MjE0YzkwZmVmMGJmNzJkMjJmMDhhZGY3MjdmNWU1OTswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2MGU2OTk7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy9wZXJsLzIwMTUucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG},
	bdsk-url-1 = {https://doi.org/10.1145/2810103.2813604}}

@inproceedings{sabetta2018-a-practical,
	abstract = { The lack of reliable sources of detailed information on the vulnerabilities of open-source software (OSS) components is a major obstacle to maintaining a secure software supply chain and an effective vulnerability management process. Standard sources of advisories and vulnerability data, such as the National Vulnerability Database (NVD), are known to suffer from poor coverage and inconsistent quality. To reduce our dependency on these sources, we propose an approach that uses machine-learning to analyze source code repositories and to automatically identify commits that are security-relevant (i.e., that are likely to fix a vulnerability). We treat the source code changes introduced by commits as documents written in natural language, classifying them using standard document classification methods. Combining independent classifiers that use information from different facets of commits, our method can yield high precision (80%) while ensuring acceptable recall (43%). In particular, the use of information extracted from the source code changes yields a substantial improvement over the best known approach in state of the art, while requiring a significantly smaller amount of training data and employing a simpler architecture. },
	address = {Los Alamitos, CA, USA},
	author = {Sabetta, Antonino and Bezzi, Michele},
	booktitle = {2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	date-added = {2025-02-23 19:39:56 +1100},
	date-modified = {2025-02-23 19:39:56 +1100},
	doi = {10.1109/ICSME.2018.00058},
	keywords = {Security;Standards;Open source software;Databases;Predictive models;Machine learning},
	month = sep,
	pages = {579-582},
	publisher = {IEEE Computer Society},
	title = {{ A Practical Approach to the Automatic Classification of Security-Relevant Commits }},
	url = {https://doi.ieeecomputersociety.org/10.1109/ICSME.2018.00058},
	year = {2018},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBdwYXBlcnMvc2FiZXR0YS8yMDE4LnBkZk8RBFBib29rUAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAHAAAAAQEAAHNhYmV0dGEACAAAAAEBAAAyMDE4LnBkZiAAAAABBgAABAAAABQAAAAsAAAAOAAAAEgAAABcAAAAbAAAAHwAAAAIAAAABAMAAOtcAAAAAAAACAAAAAQDAAD2wgMAAAAAAAgAAAAEAwAAkKgPAAAAAAAIAAAABAMAAGKuDwAAAAAACAAAAAQDAAC+CkwYAAAAAAgAAAAEAwAAwRhMGAAAAAAIAAAABAMAABvjYBgAAAAACAAAAAQDAADh4mAYAAAAACAAAAABBgAAtAAAAMQAAADUAAAA5AAAAPQAAAAEAQAAFAEAACQBAAAIAAAAAAQAAEHGtYtC0B4/GAAAAAECAAABAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAIAAAABAMAAAYAAAAAAAAABAAAAAMDAAD1AQAACAAAAAEJAABmaWxlOi8vLwwAAAABAQAATWFjaW50b3NoIEhECAAAAAQDAAAAkIKW5wAAAAgAAAAABAAAQcapP0eAAAAkAAAAAQEAADE0QzA1MEZELTE3NzctNDJCNy1CRkZELUJCRkZEMDQ1NEVBMBgAAAABAgAAgQAAAAEAAADvEwAAAQAAAAAAAAAAAAAAAQAAAAEBAAAvAAAAAAAAAAEFAAD3AAAAAQIAADg3MGI3NzA2N2MzZDFlOGVhMjNhZDJhMzk1OWQyOTc4ZTYwMmEzZTdmYzQ0YzU2MDgzZWQ2NjAyYWI4MzlmZmE7MDA7MDAwMDAwMDA7MDAwMDAwMDA7MDAwMDAwMDA7MDAwMDAwMDAwMDAwMDAyMDtjb20uYXBwbGUuYXBwLXNhbmRib3gucmVhZC13cml0ZTswMTswMTAwMDAxMDswMDAwMDAwMDE4NjBlMmUxOzAxOy91c2Vycy9hbmRyZXN0b3JoYXVnL2NvZGUvcGFwZXJzL2JpYmxpb2dyYXBoeS9wYXBlcnMvc2FiZXR0YS8yMDE4LnBkZgAAzAAAAP7///8BAAAAAAAAABAAAAAEEAAAjAAAAAAAAAAFEAAANAEAAAAAAAAQEAAAbAEAAAAAAABAEAAAXAEAAAAAAAACIAAAOAIAAAAAAAAFIAAAqAEAAAAAAAAQIAAAuAEAAAAAAAARIAAA7AEAAAAAAAASIAAAzAEAAAAAAAATIAAA3AEAAAAAAAAgIAAAGAIAAAAAAAAwIAAARAIAAAAAAAABwAAAjAEAAAAAAAARwAAAFAAAAAAAAAASwAAAnAEAAAAAAACA8AAATAIAAAAAAAAACAANABoAIwA9AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAABJE=},
	bdsk-url-1 = {https://doi.ieeecomputersociety.org/10.1109/ICSME.2018.00058},
	bdsk-url-2 = {https://doi.org/10.1109/ICSME.2018.00058}}

@inproceedings{nguyen-truong2022hermes:,
	author = {Nguyen-Truong, Giang and Kang, Hong Jin and Lo, David and Sharma, Abhishek and Santosa, Andrew E. and Sharma, Asankhaya and Ang, Ming Yi},
	booktitle = {2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	date-added = {2025-02-23 19:26:53 +1100},
	date-modified = {2025-02-23 19:26:54 +1100},
	doi = {10.1109/SANER53432.2022.00018},
	keywords = {Conferences;Computer bugs;Machine learning;Libraries;Software;Security;vulnerability curation;silent fixes;commit classification;commit-issue link recovery},
	pages = {51-62},
	title = {HERMES: Using Commit-Issue Linking to Detect Vulnerability-Fixing Commits},
	year = {2022},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEB1wYXBlcnMvbmd1eWVuLXRydW9uZy8yMDIyLnBkZk8RBGBib29rYAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAANAAAAAQEAAG5ndXllbi10cnVvbmcAAAAIAAAAAQEAADIwMjIucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAhAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAAFNxgGAAAAAAIAAAABAMAAC/bYBgAAAAAIAAAAAEGAAC8AAAAzAAAANwAAADsAAAA/AAAAAwBAAAcAQAALAEAAAgAAAAABAAAQca1iZckd6sYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAP0AAAABAgAANDAxYTBkZDlkZDU5YjE1ZGI2ZDk2OTdiYjNhYjBkZjY0NTAwYWE5ZmNkYjRjNTczMDIzZDQzMjQ5ZTA3ODRhMTswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2MGRiMmY7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy9uZ3V5ZW4tdHJ1b25nLzIwMjIucGRmAAAAAMwAAAD+////AQAAAAAAAAAQAAAABBAAAJQAAAAAAAAABRAAADwBAAAAAAAAEBAAAHQBAAAAAAAAQBAAAGQBAAAAAAAAAiAAAEACAAAAAAAABSAAALABAAAAAAAAECAAAMABAAAAAAAAESAAAPQBAAAAAAAAEiAAANQBAAAAAAAAEyAAAOQBAAAAAAAAICAAACACAAAAAAAAMCAAAEwCAAAAAAAAAcAAAJQBAAAAAAAAEcAAABQAAAAAAAAAEsAAAKQBAAAAAAAAgPAAAFQCAAAAAAAAAAgADQAaACMAQwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASn},
	bdsk-url-1 = {https://doi.org/10.1109/SANER53432.2022.00018}}

@inproceedings{zhou2023colefunda:,
	author = {Zhou, Jiayuan and Pacheco, Michael and Chen, Jinfu and Hu, Xing and Xia, Xin and Lo, David and Hassan, Ahmed E.},
	booktitle = {2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)},
	date-added = {2025-02-23 18:23:54 +1100},
	date-modified = {2025-02-23 18:23:54 +1100},
	doi = {10.1109/ICSE48619.2023.00214},
	keywords = {Surveys;Codes;Data augmentation;Sensors;Security;Task analysis;Monitoring;OSS Vulnerabilities;Contrastive Learning},
	pages = {2565-2577},
	title = {CoLeFunDa: Explainable Silent Vulnerability Fix Identification},
	year = {2023},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvemhvdS8yMDIzLnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHpob3UIAAAAAQEAADIwMjMucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA57FcGAAAAAAIAAAABAMAAA6BYBgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca1goFK0WwYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAANDg1MTYzNmJmYWNlYzkyYjllYjQzZGNiMWFhZDhiODAxZWJkYTVkY2NkOTI3NzhlY2QwZjFiODllN2NmN2IwMjswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2MDgxMGU7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy96aG91LzIwMjMucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG},
	bdsk-url-1 = {https://doi.org/10.1109/ICSE48619.2023.00214}}

@misc{yang2025code,
	archiveprefix = {arXiv},
	author = {Xu Yang and Wenhan Zhu and Michael Pacheco and Jiayuan Zhou and Shaowei Wang and Xing Hu and Kui Liu},
	date-added = {2025-02-21 16:14:51 +1100},
	date-modified = {2025-02-21 16:14:51 +1100},
	eprint = {2501.14983},
	primaryclass = {cs.SE},
	title = {Code Change Intention, Development Artifact and History Vulnerability: Putting Them Together for Vulnerability Fix Detection by LLM},
	url = {https://arxiv.org/abs/2501.14983},
	year = {2025},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMveWFuZy8yMDI1LnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHlhbmcIAAAAAQEAADIwMjUucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA7cZgGAAAAAAIAAAABAMAALbGYBgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca1iGbL0e4YAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAZGQwZTA5NjUxMTM0MmNiYjVjZDdjNzM2OWNkNmIxZWNjM2U2YmM2ZDIxZDdkOWY2NzU1MWI2MmZmZmZiZjljMzswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg2MGM2YjY7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy95YW5nLzIwMjUucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG},
	bdsk-url-1 = {https://arxiv.org/abs/2501.14983}}

@inproceedings{nguyen2022vulcurator:,
	abstract = {Open-source software (OSS) vulnerability management process is important nowadays, as the number of discovered OSS vulnerabilities is increasing over time. Monitoring vulnerability-fixing commits is a part of the standard process to prevent vulnerability exploitation. Manually detecting vulnerability-fixing commits is, however, time-consuming due to the possibly large number of commits to review. Recently, many techniques have been proposed to automatically detect vulnerability-fixing commits using machine learning. These solutions either: (1) did not use deep learning, or (2) use deep learning on only limited sources of information. This paper proposes VulCurator, a tool that leverages deep learning on richer sources of information, including commit messages, code changes and issue reports for vulnerability-fixing commit classification. Our experimental results show that VulCurator outperforms the state-of-the-art baselines up to 16.1\% in terms of F1-score.  

VulCurator tool is publicly available at https://github.com/ntgiang71096/VFDetector and https://zenodo.org/record/7034132# .Yw3MN-xBzDI, with a demo video at https://youtu.be/uMlFmWSJYOE},
	address = {New York, NY, USA},
	author = {Nguyen, Truong Giang and Le-Cong, Thanh and Kang, Hong Jin and Le, Xuan-Bach D. and Lo, David},
	booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	date-added = {2025-02-21 15:53:33 +1100},
	date-modified = {2025-02-21 15:53:33 +1100},
	doi = {10.1145/3540250.3558936},
	isbn = {9781450394130},
	keywords = {Vulnerability-Fixing Commits, Deep Learning, BERT},
	location = {Singapore, Singapore},
	numpages = {5},
	pages = {1726--1730},
	publisher = {Association for Computing Machinery},
	series = {ESEC/FSE 2022},
	title = {VulCurator: a vulnerability-fixing commit detector},
	url = {https://doi.org/10.1145/3540250.3558936},
	year = {2022},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBZwYXBlcnMvbmd1eWVuLzIwMjIucGRmTxEEUGJvb2tQBAAAAAAEEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwDAAAFAAAAAQEAAFVzZXJzAAAADQAAAAEBAABhbmRyZXN0b3JoYXVnAAAABAAAAAEBAABDb2RlBgAAAAEBAABQYXBlcnMAAAwAAAABAQAAYmlibGlvZ3JhcGh5BgAAAAEBAABwYXBlcnMAAAYAAAABAQAAbmd1eWVuAAAIAAAAAQEAADIwMjIucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAfAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA6bFcGAAAAAAIAAAABAMAAPqxXBgAAAAAIAAAAAEGAAC0AAAAxAAAANQAAADkAAAA9AAAAAQBAAAUAQAAJAEAAAgAAAAABAAAQca0H6g2e9EYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPYAAAABAgAAZDgwMzE5MjYxNzE1N2EyMjczZjU5YTg3Y2EzNTJiNDM1MTdkYTEzZDE2MTYyY2UzZjI2ZDAyMGExYjY2OTYwODswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg1Y2IxZmE7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy9uZ3V5ZW4vMjAyMi5wZGYAAADMAAAA/v///wEAAAAAAAAAEAAAAAQQAACMAAAAAAAAAAUQAAA0AQAAAAAAABAQAABsAQAAAAAAAEAQAABcAQAAAAAAAAIgAAA4AgAAAAAAAAUgAACoAQAAAAAAABAgAAC4AQAAAAAAABEgAADsAQAAAAAAABIgAADMAQAAAAAAABMgAADcAQAAAAAAACAgAAAYAgAAAAAAADAgAABEAgAAAAAAAAHAAACMAQAAAAAAABHAAAAUAAAAAAAAABLAAACcAQAAAAAAAIDwAABMAgAAAAAAAAAIAA0AGgAjADwAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAEkA==},
	bdsk-url-1 = {https://doi.org/10.1145/3540250.3558936}}

@inproceedings{zhou2021finding,
	author = {Zhou, Jiayuan and Pacheco, Michael and Wan, Zhiyuan and Xia, Xin and Lo, David and Wang, Yuan and Hassan, Ahmed E.},
	booktitle = {2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	date-added = {2025-02-21 15:51:54 +1100},
	date-modified = {2025-02-21 15:51:54 +1100},
	doi = {10.1109/ASE51524.2021.9678720},
	keywords = {Measurement;Codes;Semantics;Transformers;Needles;Security;Probes;Software Security;Vulnerability Fix;Open Source Software;Deep Learning},
	pages = {705-716},
	title = {Finding A Needle in a Haystack: Automated Mining of Silent Vulnerability Fixes},
	year = {2021},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBRwYXBlcnMvemhvdS8yMDIxLnBkZk8RBEhib29rSAQAAAAABBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAwAABQAAAAEBAABVc2VycwAAAA0AAAABAQAAYW5kcmVzdG9yaGF1ZwAAAAQAAAABAQAAQ29kZQYAAAABAQAAUGFwZXJzAAAMAAAAAQEAAGJpYmxpb2dyYXBoeQYAAAABAQAAcGFwZXJzAAAEAAAAAQEAAHpob3UIAAAAAQEAADIwMjEucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAeAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA57FcGAAAAAAIAAAABAMAAPSxXBgAAAAAIAAAAAEGAACwAAAAwAAAANAAAADgAAAA8AAAAAABAAAQAQAAIAEAAAgAAAAABAAAQca0H6g6XEUYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPQAAAABAgAAMDdjZjlhYTQxMWFjNDhkZWM4OGY0OTQxOTE5ODY1YWY3ZjhhYzc4ZjlhMTcxMDMxOGE0NDlmMmRhOWI4MDk3ODswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg1Y2IxZjQ7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy96aG91LzIwMjEucGRmAMwAAAD+////AQAAAAAAAAAQAAAABBAAAIgAAAAAAAAABRAAADABAAAAAAAAEBAAAGgBAAAAAAAAQBAAAFgBAAAAAAAAAiAAADQCAAAAAAAABSAAAKQBAAAAAAAAECAAALQBAAAAAAAAESAAAOgBAAAAAAAAEiAAAMgBAAAAAAAAEyAAANgBAAAAAAAAICAAABQCAAAAAAAAMCAAAEACAAAAAAAAAcAAAIgBAAAAAAAAEcAAABQAAAAAAAAAEsAAAJgBAAAAAAAAgPAAAEgCAAAAAAAAAAgADQAaACMAOgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAASG},
	bdsk-url-1 = {https://doi.org/10.1109/ASE51524.2021.9678720}}

@inproceedings{pan2023fine-grained,
	author = {Pan, Shengyi and Bao, Lingfeng and Xia, Xin and Lo, David and Li, Shanping},
	booktitle = {2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)},
	date-added = {2025-02-21 15:44:49 +1100},
	date-modified = {2025-02-21 15:44:49 +1100},
	doi = {10.1109/ICSE48619.2023.00088},
	keywords = {Codes;Data integrity;Computer architecture;Inference algorithms;Classification algorithms;Security;Task analysis;Software Security;Vulnerability Type;CWE},
	pages = {957-969},
	title = {Fine-grained Commit-level Vulnerability Type Prediction by CWE Tree Structure},
	year = {2023},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBNwYXBlcnMvcGFuLzIwMjMucGRmTxEESGJvb2tIBAAAAAAEEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQDAAAFAAAAAQEAAFVzZXJzAAAADQAAAAEBAABhbmRyZXN0b3JoYXVnAAAABAAAAAEBAABDb2RlBgAAAAEBAABQYXBlcnMAAAwAAAABAQAAYmlibGlvZ3JhcGh5BgAAAAEBAABwYXBlcnMAAAMAAAABAQAAcGFuAAgAAAABAQAAMjAyMy5wZGYgAAAAAQYAAAQAAAAUAAAALAAAADgAAABIAAAAXAAAAGwAAAB4AAAACAAAAAQDAADrXAAAAAAAAAgAAAAEAwAA9sIDAAAAAAAIAAAABAMAAJCoDwAAAAAACAAAAAQDAABirg8AAAAAAAgAAAAEAwAAvgpMGAAAAAAIAAAABAMAAMEYTBgAAAAACAAAAAQDAADosVwYAAAAAAgAAAAEAwAA9bFcGAAAAAAgAAAAAQYAALAAAADAAAAA0AAAAOAAAADwAAAAAAEAABABAAAgAQAACAAAAAAEAABBxrQfqDlzmBgAAAABAgAAAQAAAAAAAAAPAAAAAAAAAAAAAAAAAAAACAAAAAQDAAAGAAAAAAAAAAQAAAADAwAA9QEAAAgAAAABCQAAZmlsZTovLy8MAAAAAQEAAE1hY2ludG9zaCBIRAgAAAAEAwAAAJCClucAAAAIAAAAAAQAAEHGqT9HgAAAJAAAAAEBAAAxNEMwNTBGRC0xNzc3LTQyQjctQkZGRC1CQkZGRDA0NTRFQTAYAAAAAQIAAIEAAAABAAAA7xMAAAEAAAAAAAAAAAAAAAEAAAABAQAALwAAAAAAAAABBQAA8wAAAAECAABmNjcxOTlhYjQ5YjVlNWM0YWE1MDQzNWRjNDU0ZTBmZWI2YWYyMDUxM2RmYjM4ZWVmZTk3Mzk3NTE5N2ZjNDJjOzAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwOzAwMDAwMDAwMDAwMDAwMjA7Y29tLmFwcGxlLmFwcC1zYW5kYm94LnJlYWQtd3JpdGU7MDE7MDEwMDAwMTA7MDAwMDAwMDAxODVjYjFmNTswMTsvdXNlcnMvYW5kcmVzdG9yaGF1Zy9jb2RlL3BhcGVycy9iaWJsaW9ncmFwaHkvcGFwZXJzL3Bhbi8yMDIzLnBkZgAAzAAAAP7///8BAAAAAAAAABAAAAAEEAAAiAAAAAAAAAAFEAAAMAEAAAAAAAAQEAAAaAEAAAAAAABAEAAAWAEAAAAAAAACIAAANAIAAAAAAAAFIAAApAEAAAAAAAAQIAAAtAEAAAAAAAARIAAA6AEAAAAAAAASIAAAyAEAAAAAAAATIAAA2AEAAAAAAAAgIAAAFAIAAAAAAAAwIAAAQAIAAAAAAAABwAAAiAEAAAAAAAARwAAAFAAAAAAAAAASwAAAmAEAAAAAAACA8AAASAIAAAAAAAAACAANABoAIwA5AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAABIU=},
	bdsk-url-1 = {https://doi.org/10.1109/ICSE48619.2023.00088}}

@article{nguyen2023multi-granularity,
	author = {Nguyen, Truong Giang and Le-Cong, Thanh and Kang, Hong Jin and Widyasari, Ratnadira and Yang, Chengran and Zhao, Zhipeng and Xu, Bowen and Zhou, Jiayuan and Xia, Xin and Hassan, Ahmed E. and Le, Xuan-Bach D. and Lo, David},
	date-added = {2025-02-21 15:42:17 +1100},
	date-modified = {2025-02-21 15:44:30 +1100},
	doi = {10.1109/TSE.2023.3281275},
	journal = {IEEE Transactions on Software Engineering},
	keywords = {Codes;Task analysis;Security;Java;Libraries;Testing;Predictive models;Vulnerability-fixing commit classification;machine learning;deep learning;software security},
	number = {8},
	pages = {4035-4057},
	title = {Multi-Granularity Detector for Vulnerability Fixes},
	volume = {49},
	year = {2023},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBZwYXBlcnMvbmd1eWVuLzIwMjMucGRmTxEEUGJvb2tQBAAAAAAEEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwDAAAFAAAAAQEAAFVzZXJzAAAADQAAAAEBAABhbmRyZXN0b3JoYXVnAAAABAAAAAEBAABDb2RlBgAAAAEBAABQYXBlcnMAAAwAAAABAQAAYmlibGlvZ3JhcGh5BgAAAAEBAABwYXBlcnMAAAYAAAABAQAAbmd1eWVuAAAIAAAAAQEAADIwMjMucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAfAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA6bFcGAAAAAAIAAAABAMAAPmxXBgAAAAAIAAAAAEGAAC0AAAAxAAAANQAAADkAAAA9AAAAAQBAAAUAQAAJAEAAAgAAAAABAAAQca0H6g3LCcYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPYAAAABAgAAMmFlMmNjOThmZTA1MTFlMjljZDVlMWViMzI4MWFhMDMxYjdkMDg3NzJhNWJlNDZmZDQzMTZhMThiZTMyYzZkZDswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg1Y2IxZjk7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy9uZ3V5ZW4vMjAyMy5wZGYAAADMAAAA/v///wEAAAAAAAAAEAAAAAQQAACMAAAAAAAAAAUQAAA0AQAAAAAAABAQAABsAQAAAAAAAEAQAABcAQAAAAAAAAIgAAA4AgAAAAAAAAUgAACoAQAAAAAAABAgAAC4AQAAAAAAABEgAADsAQAAAAAAABIgAADMAQAAAAAAABMgAADcAQAAAAAAACAgAAAYAgAAAAAAADAgAABEAgAAAAAAAAHAAACMAQAAAAAAABHAAAAUAAAAAAAAABLAAACcAQAAAAAAAIDwAABMAgAAAAAAAAAIAA0AGgAjADwAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAEkA==},
	bdsk-url-1 = {https://doi.org/10.1109/TSE.2023.3281275}}

@inproceedings{kneser1995improved,
	author = {Kneser, R. and Ney, H.},
	booktitle = {1995 International Conference on Acoustics, Speech, and Signal Processing},
	date-added = {2025-02-18 16:16:54 +1100},
	date-modified = {2025-02-18 16:21:18 +1100},
	doi = {10.1109/ICASSP.1995.479394},
	pages = {181-184 vol.1},
	title = {Improved backing-off for M-gram language modeling},
	volume = {1},
	year = {1995},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhYYm9va21hcmtfEBZwYXBlcnMva25lc2VyLzE5OTUucGRmTxEEUGJvb2tQBAAAAAAEEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwDAAAFAAAAAQEAAFVzZXJzAAAADQAAAAEBAABhbmRyZXN0b3JoYXVnAAAABAAAAAEBAABDb2RlBgAAAAEBAABQYXBlcnMAAAwAAAABAQAAYmlibGlvZ3JhcGh5BgAAAAEBAABwYXBlcnMAAAYAAAABAQAAa25lc2VyAAAIAAAAAQEAADE5OTUucGRmIAAAAAEGAAAEAAAAFAAAACwAAAA4AAAASAAAAFwAAABsAAAAfAAAAAgAAAAEAwAA61wAAAAAAAAIAAAABAMAAPbCAwAAAAAACAAAAAQDAACQqA8AAAAAAAgAAAAEAwAAYq4PAAAAAAAIAAAABAMAAL4KTBgAAAAACAAAAAQDAADBGEwYAAAAAAgAAAAEAwAA9rFcGAAAAAAIAAAABAMAAPexXBgAAAAAIAAAAAEGAAC0AAAAxAAAANQAAADkAAAA9AAAAAQBAAAUAQAAJAEAAAgAAAAABAAAQcayKDoS4KgYAAAAAQIAAAEAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAgAAAAEAwAABgAAAAAAAAAEAAAAAwMAAPUBAAAIAAAAAQkAAGZpbGU6Ly8vDAAAAAEBAABNYWNpbnRvc2ggSEQIAAAABAMAAACQgpbnAAAACAAAAAAEAABBxqk/R4AAACQAAAABAQAAMTRDMDUwRkQtMTc3Ny00MkI3LUJGRkQtQkJGRkQwNDU0RUEwGAAAAAECAACBAAAAAQAAAO8TAAABAAAAAAAAAAAAAAABAAAAAQEAAC8AAAAAAAAAAQUAAPYAAAABAgAAMDQ4OGMyOWJlNmUxMmQ0ZjExZmUxYjZiNWYxNzk4OWI0YzQ0ODUxYzU4MjU0Y2I5ZmVhYmMzNDgzNDAyMjAxOTswMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDswMDAwMDAwMDAwMDAwMDIwO2NvbS5hcHBsZS5hcHAtc2FuZGJveC5yZWFkLXdyaXRlOzAxOzAxMDAwMDEwOzAwMDAwMDAwMTg1Y2IxZjc7MDE7L3VzZXJzL2FuZHJlc3RvcmhhdWcvY29kZS9wYXBlcnMvYmlibGlvZ3JhcGh5L3BhcGVycy9rbmVzZXIvMTk5NS5wZGYAAADMAAAA/v///wEAAAAAAAAAEAAAAAQQAACMAAAAAAAAAAUQAAA0AQAAAAAAABAQAABsAQAAAAAAAEAQAABcAQAAAAAAAAIgAAA4AgAAAAAAAAUgAACoAQAAAAAAABAgAAC4AQAAAAAAABEgAADsAQAAAAAAABIgAADMAQAAAAAAABMgAADcAQAAAAAAACAgAAAYAgAAAAAAADAgAABEAgAAAAAAAAHAAACMAQAAAAAAABHAAAAUAAAAAAAAABLAAACcAQAAAAAAAIDwAABMAgAAAAAAAAAIAA0AGgAjADwAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAEkA==}}
